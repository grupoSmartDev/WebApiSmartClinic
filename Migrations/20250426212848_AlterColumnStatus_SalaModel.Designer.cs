// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApiSmartClinic.Data;

#nullable disable

namespace WebApiSmartClinic.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250426212848_AlterColumnStatus_SalaModel")]
    partial class AlterColumnStatus_SalaModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Support",
                            NormalizedName = "SUPPORT"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApiSmartClinic.Dto.Paciente.RecorrenciaPacienteDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DiaSemana")
                        .HasColumnType("integer");

                    b.Property<string>("HoraFim")
                        .HasColumnType("text");

                    b.Property<string>("HoraInicio")
                        .HasColumnType("text");

                    b.Property<int?>("PacienteId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProfissionalId")
                        .HasColumnType("integer");

                    b.Property<int?>("SalaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("RecorrenciaPacienteDto");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.AgendaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Avulso")
                        .HasColumnType("boolean");

                    b.Property<bool>("Convenio")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataFimRecorrencia")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int[]>("DiasRecorrencia")
                        .HasColumnType("integer[]");

                    b.Property<int?>("FinancReceberId")
                        .HasColumnType("integer");

                    b.Property<string>("FormaPagamento")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("HoraFim")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("HoraInicio")
                        .HasColumnType("interval");

                    b.Property<bool>("IntegracaoGmail")
                        .HasColumnType("boolean");

                    b.Property<bool>("LembreteEmail")
                        .HasColumnType("boolean");

                    b.Property<bool>("LembreteSms")
                        .HasColumnType("boolean");

                    b.Property<bool>("LembreteWhatsapp")
                        .HasColumnType("boolean");

                    b.Property<int?>("PacienteId")
                        .HasColumnType("integer");

                    b.Property<int?>("PacoteId")
                        .HasColumnType("integer");

                    b.Property<bool>("Pago")
                        .HasColumnType("boolean");

                    b.Property<int?>("ProfissionalId")
                        .HasColumnType("integer");

                    b.Property<int?>("SalaId")
                        .HasColumnType("integer");

                    b.Property<bool>("StatusFinal")
                        .HasColumnType("boolean");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Valor")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("FinancReceberId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("PacoteId");

                    b.HasIndex("ProfissionalId");

                    b.HasIndex("StatusId");

                    b.ToTable("Agenda");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.AtividadeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("EvolucaoId")
                        .HasColumnType("integer");

                    b.Property<string>("Tempo")
                        .HasColumnType("text");

                    b.Property<string>("Titulo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EvolucaoId");

                    b.ToTable("Atividade");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.AutorModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Autores");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.BancoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Agencia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("Carteira")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CodigoBeneficiario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CodigoConvenio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CodigoTransmissao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocumentoTitular")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NomeBanco")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NomeTitular")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NumeroConta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NumeroContrato")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("SaldoInicial")
                        .HasColumnType("numeric");

                    b.Property<string>("TipoConta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VariacaoCarteira")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Banco");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.BoletoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BancoId")
                        .HasColumnType("integer");

                    b.Property<string>("CodigoDeBarras")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DataPagamento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataVencimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocumentoSacado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Juros")
                        .HasColumnType("numeric");

                    b.Property<string>("LinhaDigitavel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Multa")
                        .HasColumnType("numeric");

                    b.Property<string>("NomeSacado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NossoNumero")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Pago")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BancoId");

                    b.ToTable("Boleto");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.CadastroClienteModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("CNPJEmpresaMatriz")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CelularComWhatsApp")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataInicioTeste")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataNascimentoTitular")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Especialidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("PeriodoTeste")
                        .HasColumnType("boolean");

                    b.Property<string>("PlanoEscolhido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QtdeLicencaEmpresaPermitida")
                        .HasColumnType("integer");

                    b.Property<int>("QtdeLicencaEmpresaUtilizada")
                        .HasColumnType("integer");

                    b.Property<int>("QtdeLicencaUsuarioPermitida")
                        .HasColumnType("integer");

                    b.Property<int>("QtdeLicencaUsuarioUtilizada")
                        .HasColumnType("integer");

                    b.Property<bool>("ReceberNotificacoes")
                        .HasColumnType("boolean");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TelefoneFixo")
                        .HasColumnType("text");

                    b.Property<int>("TipoPagamentoId")
                        .HasColumnType("integer");

                    b.Property<string>("TitularCPF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TipoPagamentoId");

                    b.ToTable("CadastroCliente");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.CategoriaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.CentroCustoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsSystemDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CentroCusto");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Geral - Receita",
                            IsSystemDefault = true,
                            Tipo = "R"
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Geral - Despesa",
                            IsSystemDefault = true,
                            Tipo = "D"
                        });
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.ComissaoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAtendimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataPagamento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Pago")
                        .HasColumnType("boolean");

                    b.Property<decimal>("PercentualComissao")
                        .HasColumnType("numeric");

                    b.Property<int>("ProcedimentoId")
                        .HasColumnType("integer");

                    b.Property<int>("ProfissionalId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ValorComissao")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ValorProcedimento")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ProcedimentoId");

                    b.HasIndex("ProfissionalId");

                    b.ToTable("Comissao");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.ConselhoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsSystemDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Conselho");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsSystemDefault = true,
                            Nome = "Conselho Regional de Fisioterapia e Terapia Ocupacional",
                            Sigla = "CREFITO"
                        },
                        new
                        {
                            Id = 2,
                            IsSystemDefault = true,
                            Nome = "Conselho Federal de Psicologia",
                            Sigla = "CFP"
                        });
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.ConvenioModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsSystemDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PeriodoCarencia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegistroAvs")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Convenio");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            Email = "email@email.com",
                            IsSystemDefault = true,
                            Nome = "Unimed",
                            PeriodoCarencia = "0",
                            RegistroAvs = "ABC",
                            Telefone = "3434-3434"
                        });
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.DespesaFixaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("CentroCustoId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("DiaVencimento")
                        .HasColumnType("integer");

                    b.Property<int?>("FornecedorId")
                        .HasColumnType("integer");

                    b.Property<int>("Frequencia")
                        .HasColumnType("integer");

                    b.Property<int?>("PlanoContaId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CentroCustoId");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("PlanoContaId");

                    b.ToTable("DespesasFixas", (string)null);
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.EmpresaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DatabaseConnectionString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Empresa");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.EvolucaoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataEvolucao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PacienteId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProfissionalId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("Evolucoes");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.ExercicioModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("EvolucaoId")
                        .HasColumnType("integer");

                    b.Property<string>("Obs")
                        .HasColumnType("text");

                    b.Property<int?>("Peso")
                        .HasColumnType("integer");

                    b.Property<int?>("Repeticoes")
                        .HasColumnType("integer");

                    b.Property<int?>("Series")
                        .HasColumnType("integer");

                    b.Property<int?>("Tempo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EvolucaoId");

                    b.ToTable("Exercicio");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.FichaAvaliacaoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AlergiaMedicamentos")
                        .HasColumnType("text");

                    b.Property<string>("Alergias")
                        .HasColumnType("text");

                    b.Property<double?>("Altura")
                        .HasColumnType("double precision");

                    b.Property<string>("AmplitudeMovimento")
                        .HasColumnType("text");

                    b.Property<string>("AssinaturaCliente")
                        .HasColumnType("text");

                    b.Property<string>("AssinaturaProfissional")
                        .HasColumnType("text");

                    b.Property<string>("AvaliacaoPostural")
                        .HasColumnType("text");

                    b.Property<string>("Cirurgia")
                        .HasColumnType("text");

                    b.Property<bool>("CirurgiasPrevias")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DataAvaliacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DetalheCirurgias")
                        .HasColumnType("text");

                    b.Property<string>("DoencaNeurodegenerativa")
                        .HasColumnType("text");

                    b.Property<string>("DoencasCronicas")
                        .HasColumnType("text");

                    b.Property<string>("DoencasPreExistentes")
                        .HasColumnType("text");

                    b.Property<string>("Especialidade")
                        .HasColumnType("text");

                    b.Property<string>("FrequenciaConsumoAlcool")
                        .HasColumnType("text");

                    b.Property<string>("HistoriaAtual")
                        .HasColumnType("text");

                    b.Property<string>("HistoriaPregressa")
                        .HasColumnType("text");

                    b.Property<bool>("HistoricoDoencas")
                        .HasColumnType("boolean");

                    b.Property<double?>("IMC")
                        .HasColumnType("double precision");

                    b.Property<int?>("Idade")
                        .HasColumnType("integer");

                    b.Property<string>("Medicacao")
                        .HasColumnType("text");

                    b.Property<bool>("MedicacaoUsoContinuo")
                        .HasColumnType("boolean");

                    b.Property<string>("ObjetivosDoTratamento")
                        .HasColumnType("text");

                    b.Property<string>("ObservacoesGerais")
                        .HasColumnType("text");

                    b.Property<int?>("PacienteId")
                        .HasColumnType("integer");

                    b.Property<double?>("Peso")
                        .HasColumnType("double precision");

                    b.Property<bool>("PraticaAtividade")
                        .HasColumnType("boolean");

                    b.Property<int?>("ProfissionalId")
                        .HasColumnType("integer");

                    b.Property<string>("QueixaPrincipal")
                        .HasColumnType("text");

                    b.Property<string>("Sexo")
                        .HasColumnType("text");

                    b.Property<string>("SinaisVitais")
                        .HasColumnType("text");

                    b.Property<bool>("Tabagista")
                        .HasColumnType("boolean");

                    b.Property<string>("TipoDor")
                        .HasColumnType("text");

                    b.Property<string>("TratamentosRealizados")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId")
                        .IsUnique();

                    b.HasIndex("ProfissionalId");

                    b.ToTable("FichaAvaliacao");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.Financ_PagarModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BancoId")
                        .HasColumnType("integer");

                    b.Property<int?>("CentroCustoId")
                        .HasColumnType("integer");

                    b.Property<string>("Classificacao")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DataEmissao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<int?>("FornecedorId")
                        .HasColumnType("integer");

                    b.Property<int?>("IdOrigem")
                        .HasColumnType("integer");

                    b.Property<string>("NotaFiscal")
                        .HasColumnType("text");

                    b.Property<int?>("NrDocto")
                        .HasColumnType("integer");

                    b.Property<string>("Observacao")
                        .HasColumnType("text");

                    b.Property<int?>("PacienteId")
                        .HasColumnType("integer");

                    b.Property<int?>("Parcela")
                        .HasColumnType("integer");

                    b.Property<int?>("PlanoContaId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int?>("TipoPagamentoId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Valor")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ValorOriginal")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ValorPago")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BancoId");

                    b.HasIndex("CentroCustoId");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("PlanoContaId");

                    b.HasIndex("TipoPagamentoId");

                    b.ToTable("Financ_Pagar");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.Financ_PagarSubModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<DateTime?>("DataPagamento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataVencimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Desconto")
                        .HasColumnType("numeric");

                    b.Property<int?>("DespesaFixaId")
                        .HasColumnType("integer");

                    b.Property<int?>("FormaPagamentoId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Juros")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Multa")
                        .HasColumnType("numeric");

                    b.Property<string>("Observacao")
                        .HasColumnType("text");

                    b.Property<int?>("Parcela")
                        .HasColumnType("integer");

                    b.Property<int?>("TipoPagamentoId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ValorPago")
                        .HasColumnType("numeric");

                    b.Property<int?>("financPagarId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DespesaFixaId");

                    b.HasIndex("FormaPagamentoId");

                    b.HasIndex("TipoPagamentoId");

                    b.HasIndex("financPagarId");

                    b.ToTable("Financ_PagarSub", (string)null);
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.Financ_ReceberModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BancoId")
                        .HasColumnType("integer");

                    b.Property<int?>("CentroCustoId")
                        .HasColumnType("integer");

                    b.Property<string>("Classificacao")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DataEmissao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<int?>("FornecedorId")
                        .HasColumnType("integer");

                    b.Property<int?>("IdOrigem")
                        .HasColumnType("integer");

                    b.Property<string>("NotaFiscal")
                        .HasColumnType("text");

                    b.Property<int?>("NrDocto")
                        .HasColumnType("integer");

                    b.Property<string>("Observacao")
                        .HasColumnType("text");

                    b.Property<int?>("PacienteId")
                        .HasColumnType("integer");

                    b.Property<int?>("Parcela")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int>("TipoPagamentoId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Valor")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ValorOriginal")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ValorPago")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BancoId");

                    b.HasIndex("CentroCustoId");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("TipoPagamentoId");

                    b.ToTable("Financ_Receber");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.Financ_ReceberSubModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<DateTime?>("DataPagamento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataVencimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Desconto")
                        .HasColumnType("numeric");

                    b.Property<int?>("FormaPagamentoId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Juros")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Multa")
                        .HasColumnType("numeric");

                    b.Property<string>("Observacao")
                        .HasColumnType("text");

                    b.Property<int?>("Parcela")
                        .HasColumnType("integer");

                    b.Property<int?>("TipoPagamentoId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ValorPago")
                        .HasColumnType("numeric");

                    b.Property<int?>("financReceberId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FormaPagamentoId");

                    b.HasIndex("TipoPagamentoId");

                    b.HasIndex("financReceberId");

                    b.ToTable("Financ_ReceberSub");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.FormaPagamentoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsSystemDefault")
                        .HasColumnType("boolean");

                    b.Property<int>("Parcelas")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FormaPagamento");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Dinheiro",
                            IsSystemDefault = true,
                            Parcelas = 1
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Cartão de Crédito",
                            IsSystemDefault = true,
                            Parcelas = 1
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "Cartão de Débito",
                            IsSystemDefault = true,
                            Parcelas = 1
                        },
                        new
                        {
                            Id = 4,
                            Descricao = "Boleto",
                            IsSystemDefault = true,
                            Parcelas = 1
                        },
                        new
                        {
                            Id = 5,
                            Descricao = "Pix",
                            IsSystemDefault = true,
                            Parcelas = 1
                        },
                        new
                        {
                            Id = 6,
                            Descricao = "Depósito",
                            IsSystemDefault = true,
                            Parcelas = 1
                        });
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.FornecedorModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Agencia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Banco")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChavePIX")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Conta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EstadoCivil")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Fantasia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IE")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IM")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NrLogradouro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Razao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TelefoneFixo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TipoPIX")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Fornecedor");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.HistoricoTransacaoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BancoId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DataTransacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TipoTransacao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BancoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("HistoricoTransacao");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.LivroModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AutorId")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.ToTable("Livros");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.LogUsuarioModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataMovimentacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IdMovimentacao")
                        .HasColumnType("integer");

                    b.Property<string>("Rotina")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("LogUsuario");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.PacienteModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bairro")
                        .HasColumnType("text");

                    b.Property<string>("BreveDiagnostico")
                        .HasColumnType("text");

                    b.Property<string>("Celular")
                        .HasColumnType("text");

                    b.Property<string>("Cep")
                        .HasColumnType("text");

                    b.Property<string>("Cidade")
                        .HasColumnType("text");

                    b.Property<string>("ComoConheceu")
                        .HasColumnType("text");

                    b.Property<string>("Complemento")
                        .HasColumnType("text");

                    b.Property<int?>("ConvenioId")
                        .HasColumnType("integer");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataFimRecorrencia")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataUltimoAtendimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("EstadoCivil")
                        .HasColumnType("text");

                    b.Property<int?>("FichaAvaliacaoId")
                        .HasColumnType("integer");

                    b.Property<string>("Logradouro")
                        .HasColumnType("text");

                    b.Property<string>("Medicamento")
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Numero")
                        .HasColumnType("text");

                    b.Property<string>("Pais")
                        .HasColumnType("text");

                    b.Property<bool>("PermitirLembretes")
                        .HasColumnType("boolean");

                    b.Property<int?>("PlanoId")
                        .HasColumnType("integer");

                    b.Property<string>("PreferenciaDeContato")
                        .HasColumnType("text");

                    b.Property<string>("Profissao")
                        .HasColumnType("text");

                    b.Property<int?>("ProfissionalId")
                        .HasColumnType("integer");

                    b.Property<bool>("Responsavel")
                        .HasColumnType("boolean");

                    b.Property<string>("Rg")
                        .HasColumnType("text");

                    b.Property<string>("Sexo")
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .HasColumnType("text");

                    b.Property<string>("Uf")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConvenioId");

                    b.HasIndex("PlanoId")
                        .IsUnique();

                    b.HasIndex("ProfissionalId");

                    b.ToTable("Paciente");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.PlanoContaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("Inativo")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Observacao")
                        .HasColumnType("text");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PlanoConta");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codigo = "1",
                            Inativo = false,
                            IsSystemDefault = true,
                            Nome = "Geral - Ativo",
                            Tipo = "A"
                        },
                        new
                        {
                            Id = 2,
                            Codigo = "2",
                            Inativo = false,
                            IsSystemDefault = true,
                            Nome = "Geral - Passívo",
                            Tipo = "P"
                        },
                        new
                        {
                            Id = 3,
                            Codigo = "3",
                            Inativo = false,
                            IsSystemDefault = true,
                            Nome = "Geral - Receita",
                            Tipo = "R"
                        },
                        new
                        {
                            Id = 4,
                            Codigo = "4",
                            Inativo = false,
                            IsSystemDefault = true,
                            Nome = "Geral - Despesa",
                            Tipo = "D"
                        });
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.PlanoContaSubModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PlanoContaId")
                        .HasColumnType("integer");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlanoContaId");

                    b.ToTable("PlanoContaSub");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.PlanoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<int?>("CentroCustoId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("DiasSemana")
                        .HasColumnType("integer");

                    b.Property<int?>("FinanceiroId")
                        .HasColumnType("integer");

                    b.Property<int?>("PacienteId")
                        .HasColumnType("integer");

                    b.Property<int>("TempoMinutos")
                        .HasColumnType("integer");

                    b.Property<string>("TipoMes")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<decimal?>("ValorAnual")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ValorBimestral")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ValorMensal")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ValorQuadrimestral")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ValorSemestral")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ValorTrimestral")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("FinanceiroId");

                    b.ToTable("Plano");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.ProcedimentoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("integer");

                    b.Property<int?>("CategoriaModelId")
                        .HasColumnType("integer");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Duracao")
                        .HasColumnType("text");

                    b.Property<string>("MateriaisNecessarios")
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("PercentualComissao")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Preco")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaModelId");

                    b.ToTable("Procedimento");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.ProfissaoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsSystemDefault")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Profissao");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Administrador(a)",
                            IsSystemDefault = true
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "psicólogo(a)",
                            IsSystemDefault = true
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "Fisioterapeuta",
                            IsSystemDefault = true
                        },
                        new
                        {
                            Id = 4,
                            Descricao = "Dentista",
                            IsSystemDefault = true
                        });
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.ProfissionalModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BancoAgencia")
                        .HasColumnType("text");

                    b.Property<string>("BancoConta")
                        .HasColumnType("text");

                    b.Property<string>("BancoCpfTitular")
                        .HasColumnType("text");

                    b.Property<string>("BancoNome")
                        .HasColumnType("text");

                    b.Property<string>("BancoTipoConta")
                        .HasColumnType("text");

                    b.Property<string>("Cbo")
                        .HasColumnType("text");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChavePix")
                        .HasColumnType("text");

                    b.Property<string>("Cnes")
                        .HasColumnType("text");

                    b.Property<int?>("ConselhoId")
                        .HasColumnType("integer");

                    b.Property<string>("Cpf")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("EhUsuario")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int?>("ProfissaoId")
                        .HasColumnType("integer");

                    b.Property<string>("RegistroConselho")
                        .HasColumnType("text");

                    b.Property<string>("Rqe")
                        .HasColumnType("text");

                    b.Property<string>("Sexo")
                        .HasColumnType("text");

                    b.Property<string>("Sobrenome")
                        .HasColumnType("text");

                    b.Property<string>("TipoPagamento")
                        .HasColumnType("text");

                    b.Property<string>("UfConselho")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Profissional");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.RecorrenciaPacienteModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DiaSemana")
                        .HasColumnType("integer");

                    b.Property<string>("HoraFim")
                        .HasColumnType("text");

                    b.Property<string>("HoraInicio")
                        .HasColumnType("text");

                    b.Property<int?>("PacienteId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProfissionalId")
                        .HasColumnType("integer");

                    b.Property<int?>("SalaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("RecorrenciaPaciente");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.SalaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacidade")
                        .HasColumnType("integer");

                    b.Property<string>("HorarioFincionamento")
                        .HasColumnType("text");

                    b.Property<bool>("IsSystemDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Observacao")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Tipo")
                        .HasColumnType("text");

                    b.Property<string>("local")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sala");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacidade = 10,
                            IsSystemDefault = true,
                            Nome = "Principal",
                            Status = true,
                            Tipo = "Geral",
                            local = "Principal"
                        });
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.StatusModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsSystemDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Legenda")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cor = "#4B89DC",
                            IsSystemDefault = true,
                            Legenda = "Agendamento realizado com sucesso!",
                            Status = "Agendado"
                        },
                        new
                        {
                            Id = 2,
                            Cor = "#3498DB",
                            IsSystemDefault = true,
                            Legenda = "Confirmado",
                            Status = "Confirmado"
                        },
                        new
                        {
                            Id = 3,
                            Cor = "#5D9CEC",
                            IsSystemDefault = true,
                            Legenda = "Em atendimento",
                            Status = "em_atendimento"
                        },
                        new
                        {
                            Id = 4,
                            Cor = "#2ECC71",
                            IsSystemDefault = true,
                            Legenda = "Concluído",
                            Status = "concluido"
                        },
                        new
                        {
                            Id = 5,
                            Cor = "#E74C3C",
                            IsSystemDefault = true,
                            Legenda = "Cancelado pelo paciente",
                            Status = "cancelado_paciente"
                        },
                        new
                        {
                            Id = 6,
                            Cor = "#E57373",
                            IsSystemDefault = true,
                            Legenda = "Cancelado pela clínica",
                            Status = "cancelado_clinica"
                        },
                        new
                        {
                            Id = 7,
                            Cor = "#F9A825",
                            IsSystemDefault = true,
                            Legenda = "Remarcado",
                            Status = "remarcado"
                        },
                        new
                        {
                            Id = 8,
                            Cor = "#E67E22",
                            IsSystemDefault = true,
                            Legenda = "Não compareceu",
                            Status = "nao_compareceu"
                        });
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.SubCentroCustoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CentroCustoId")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CentroCustoId");

                    b.ToTable("SubCentroCusto");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.TipoPagamentoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<bool>("IsSystemDefault")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("TipoPagamento");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "À Vista",
                            IsSystemDefault = true
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Parcelado",
                            IsSystemDefault = true
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "Convênio",
                            IsSystemDefault = true
                        },
                        new
                        {
                            Id = 4,
                            Descricao = "Recorrente",
                            IsSystemDefault = true
                        });
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("bytea");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.UsuarioModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int[]>("Permissao")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int?>("ProfissionalId")
                        .HasColumnType("integer");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("ProfissionalId");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApiSmartClinic.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApiSmartClinic.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiSmartClinic.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApiSmartClinic.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApiSmartClinic.Dto.Paciente.RecorrenciaPacienteDto", b =>
                {
                    b.HasOne("WebApiSmartClinic.Models.PacienteModel", "Paciente")
                        .WithMany("Recorrencias")
                        .HasForeignKey("PacienteId");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.AgendaModel", b =>
                {
                    b.HasOne("WebApiSmartClinic.Models.Financ_ReceberModel", "FinancReceber")
                        .WithMany()
                        .HasForeignKey("FinancReceberId");

                    b.HasOne("WebApiSmartClinic.Models.PacienteModel", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId");

                    b.HasOne("WebApiSmartClinic.Models.PacienteModel", "Pacote")
                        .WithMany()
                        .HasForeignKey("PacoteId");

                    b.HasOne("WebApiSmartClinic.Models.ProfissionalModel", "Profissional")
                        .WithMany()
                        .HasForeignKey("ProfissionalId");

                    b.HasOne("WebApiSmartClinic.Models.StatusModel", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("FinancReceber");

                    b.Navigation("Paciente");

                    b.Navigation("Pacote");

                    b.Navigation("Profissional");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.AtividadeModel", b =>
                {
                    b.HasOne("WebApiSmartClinic.Models.EvolucaoModel", "Evolucao")
                        .WithMany("Atividades")
                        .HasForeignKey("EvolucaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Evolucao");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.BoletoModel", b =>
                {
                    b.HasOne("WebApiSmartClinic.Models.BancoModel", "Banco")
                        .WithMany()
                        .HasForeignKey("BancoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banco");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.CadastroClienteModel", b =>
                {
                    b.HasOne("WebApiSmartClinic.Models.TipoPagamentoModel", "TipoPagamento")
                        .WithMany()
                        .HasForeignKey("TipoPagamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoPagamento");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.ComissaoModel", b =>
                {
                    b.HasOne("WebApiSmartClinic.Models.ProcedimentoModel", "Procedimento")
                        .WithMany()
                        .HasForeignKey("ProcedimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiSmartClinic.Models.ProfissionalModel", "Profissional")
                        .WithMany()
                        .HasForeignKey("ProfissionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Procedimento");

                    b.Navigation("Profissional");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.DespesaFixaModel", b =>
                {
                    b.HasOne("WebApiSmartClinic.Models.CentroCustoModel", "CentroCusto")
                        .WithMany()
                        .HasForeignKey("CentroCustoId");

                    b.HasOne("WebApiSmartClinic.Models.FornecedorModel", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId");

                    b.HasOne("WebApiSmartClinic.Models.PlanoContaModel", "PlanoConta")
                        .WithMany()
                        .HasForeignKey("PlanoContaId");

                    b.Navigation("CentroCusto");

                    b.Navigation("Fornecedor");

                    b.Navigation("PlanoConta");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.EvolucaoModel", b =>
                {
                    b.HasOne("WebApiSmartClinic.Models.PacienteModel", "Paciente")
                        .WithMany("Evolucoes")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.ExercicioModel", b =>
                {
                    b.HasOne("WebApiSmartClinic.Models.EvolucaoModel", "Evolucao")
                        .WithMany("Exercicios")
                        .HasForeignKey("EvolucaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Evolucao");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.FichaAvaliacaoModel", b =>
                {
                    b.HasOne("WebApiSmartClinic.Models.PacienteModel", "Paciente")
                        .WithOne("FichaAvaliacao")
                        .HasForeignKey("WebApiSmartClinic.Models.FichaAvaliacaoModel", "PacienteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApiSmartClinic.Models.ProfissionalModel", "Profissional")
                        .WithMany("FichasAvaliacao")
                        .HasForeignKey("ProfissionalId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Paciente");

                    b.Navigation("Profissional");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.Financ_PagarModel", b =>
                {
                    b.HasOne("WebApiSmartClinic.Models.BancoModel", "Banco")
                        .WithMany()
                        .HasForeignKey("BancoId");

                    b.HasOne("WebApiSmartClinic.Models.CentroCustoModel", "CentroCusto")
                        .WithMany()
                        .HasForeignKey("CentroCustoId");

                    b.HasOne("WebApiSmartClinic.Models.FornecedorModel", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId");

                    b.HasOne("WebApiSmartClinic.Models.PacienteModel", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId");

                    b.HasOne("WebApiSmartClinic.Models.PlanoContaModel", "PlanoConta")
                        .WithMany()
                        .HasForeignKey("PlanoContaId");

                    b.HasOne("WebApiSmartClinic.Models.TipoPagamentoModel", "TipoPagamento")
                        .WithMany()
                        .HasForeignKey("TipoPagamentoId");

                    b.Navigation("Banco");

                    b.Navigation("CentroCusto");

                    b.Navigation("Fornecedor");

                    b.Navigation("Paciente");

                    b.Navigation("PlanoConta");

                    b.Navigation("TipoPagamento");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.Financ_PagarSubModel", b =>
                {
                    b.HasOne("WebApiSmartClinic.Models.DespesaFixaModel", "DespesaFixa")
                        .WithMany("FinancPagar")
                        .HasForeignKey("DespesaFixaId");

                    b.HasOne("WebApiSmartClinic.Models.FormaPagamentoModel", "FormaPagamento")
                        .WithMany()
                        .HasForeignKey("FormaPagamentoId");

                    b.HasOne("WebApiSmartClinic.Models.TipoPagamentoModel", "TipoPagamento")
                        .WithMany()
                        .HasForeignKey("TipoPagamentoId");

                    b.HasOne("WebApiSmartClinic.Models.Financ_PagarModel", "FinancPagar")
                        .WithMany("subFinancPagar")
                        .HasForeignKey("financPagarId");

                    b.Navigation("DespesaFixa");

                    b.Navigation("FinancPagar");

                    b.Navigation("FormaPagamento");

                    b.Navigation("TipoPagamento");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.Financ_ReceberModel", b =>
                {
                    b.HasOne("WebApiSmartClinic.Models.BancoModel", "Banco")
                        .WithMany()
                        .HasForeignKey("BancoId");

                    b.HasOne("WebApiSmartClinic.Models.CentroCustoModel", "CentroCusto")
                        .WithMany()
                        .HasForeignKey("CentroCustoId");

                    b.HasOne("WebApiSmartClinic.Models.FornecedorModel", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId");

                    b.HasOne("WebApiSmartClinic.Models.PacienteModel", "Paciente")
                        .WithMany("FinancReceber")
                        .HasForeignKey("PacienteId");

                    b.HasOne("WebApiSmartClinic.Models.TipoPagamentoModel", "TipoPagamento")
                        .WithMany()
                        .HasForeignKey("TipoPagamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banco");

                    b.Navigation("CentroCusto");

                    b.Navigation("Fornecedor");

                    b.Navigation("Paciente");

                    b.Navigation("TipoPagamento");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.Financ_ReceberSubModel", b =>
                {
                    b.HasOne("WebApiSmartClinic.Models.FormaPagamentoModel", "FormaPagamento")
                        .WithMany()
                        .HasForeignKey("FormaPagamentoId");

                    b.HasOne("WebApiSmartClinic.Models.TipoPagamentoModel", "TipoPagamento")
                        .WithMany()
                        .HasForeignKey("TipoPagamentoId");

                    b.HasOne("WebApiSmartClinic.Models.Financ_ReceberModel", "FinancReceber")
                        .WithMany("subFinancReceber")
                        .HasForeignKey("financReceberId");

                    b.Navigation("FinancReceber");

                    b.Navigation("FormaPagamento");

                    b.Navigation("TipoPagamento");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.HistoricoTransacaoModel", b =>
                {
                    b.HasOne("WebApiSmartClinic.Models.BancoModel", "Banco")
                        .WithMany()
                        .HasForeignKey("BancoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiSmartClinic.Models.UsuarioModel", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Banco");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.LivroModel", b =>
                {
                    b.HasOne("WebApiSmartClinic.Models.AutorModel", "Autor")
                        .WithMany("Livros")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.LogUsuarioModel", b =>
                {
                    b.HasOne("WebApiSmartClinic.Models.UsuarioModel", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.PacienteModel", b =>
                {
                    b.HasOne("WebApiSmartClinic.Models.ConvenioModel", "Convenio")
                        .WithMany("Pacientes")
                        .HasForeignKey("ConvenioId");

                    b.HasOne("WebApiSmartClinic.Models.PlanoModel", "Plano")
                        .WithOne("Paciente")
                        .HasForeignKey("WebApiSmartClinic.Models.PacienteModel", "PlanoId");

                    b.HasOne("WebApiSmartClinic.Models.ProfissionalModel", "Profissional")
                        .WithMany()
                        .HasForeignKey("ProfissionalId");

                    b.Navigation("Convenio");

                    b.Navigation("Plano");

                    b.Navigation("Profissional");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.PlanoContaSubModel", b =>
                {
                    b.HasOne("WebApiSmartClinic.Models.PlanoContaModel", "PlanoConta")
                        .WithMany("SubPlanos")
                        .HasForeignKey("PlanoContaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlanoConta");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.PlanoModel", b =>
                {
                    b.HasOne("WebApiSmartClinic.Models.Financ_ReceberModel", "Financeiro")
                        .WithMany()
                        .HasForeignKey("FinanceiroId");

                    b.Navigation("Financeiro");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.ProcedimentoModel", b =>
                {
                    b.HasOne("WebApiSmartClinic.Models.CategoriaModel", null)
                        .WithMany("Procedimentos")
                        .HasForeignKey("CategoriaModelId");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.SubCentroCustoModel", b =>
                {
                    b.HasOne("WebApiSmartClinic.Models.CentroCustoModel", "CentroCusto")
                        .WithMany("SubCentrosCusto")
                        .HasForeignKey("CentroCustoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CentroCusto");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.UsuarioModel", b =>
                {
                    b.HasOne("WebApiSmartClinic.Models.EmpresaModel", "Empresa")
                        .WithMany("Usuarios")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiSmartClinic.Models.ProfissionalModel", "Profissional")
                        .WithMany()
                        .HasForeignKey("ProfissionalId");

                    b.Navigation("Empresa");

                    b.Navigation("Profissional");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.AutorModel", b =>
                {
                    b.Navigation("Livros");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.CategoriaModel", b =>
                {
                    b.Navigation("Procedimentos");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.CentroCustoModel", b =>
                {
                    b.Navigation("SubCentrosCusto");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.ConvenioModel", b =>
                {
                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.DespesaFixaModel", b =>
                {
                    b.Navigation("FinancPagar");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.EmpresaModel", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.EvolucaoModel", b =>
                {
                    b.Navigation("Atividades");

                    b.Navigation("Exercicios");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.Financ_PagarModel", b =>
                {
                    b.Navigation("subFinancPagar");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.Financ_ReceberModel", b =>
                {
                    b.Navigation("subFinancReceber");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.PacienteModel", b =>
                {
                    b.Navigation("Evolucoes");

                    b.Navigation("FichaAvaliacao");

                    b.Navigation("FinancReceber");

                    b.Navigation("Recorrencias");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.PlanoContaModel", b =>
                {
                    b.Navigation("SubPlanos");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.PlanoModel", b =>
                {
                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("WebApiSmartClinic.Models.ProfissionalModel", b =>
                {
                    b.Navigation("FichasAvaliacao");
                });
#pragma warning restore 612, 618
        }
    }
}
